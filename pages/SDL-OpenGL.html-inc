<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#CAVEATS">CAVEATS</a></li>
<li><a href="#AUTHOR">AUTHOR</a></li>
<li><a href="#SEE_ALSO">SEE ALSO</a>
</li>
</ul><hr />
<!-- INDEX END -->








<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDL::OpenGL - a perl extension</p>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">
<p><a href="/SDL-OpenGL.html">SDL::OpenGL</a> is a perl module which when used by your application
exports the gl* and glu* functions into your application's primary namespace.
Most of the functions described in the OpenGL 1.3 specification are currently
supported in this fashion.  As the implementation of the OpenGL bindings that
comes with SDL_perl is largely type agnositic, there is no need to decline
the function names in the fashion that is done in the C API. For example,
glVertex3d is simply glVertex, and perl just does the right thing with regards
to types.</p>

</div>
<h1 id="CAVEATS">CAVEATS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CAVEATS_CONTENT">
<p>The following methods work different in Perl than in C:</p>
<dl>
	<dt>glCallLists</dt>
	<dd>
<pre>        glCallLists(@array_of_numbers);

</pre>
		<p>Unlike the C function, which get's passed a count, a type and a list of
numbers, the Perl equivalent only takes a list of numbers.</p>
		<p>Note that this is slow, since it needs to allocate memory and construct a
list of numbers from the given scalars. For a faster version see
<a href="http://search.cpan.org/perldoc?glCallListsString">glCallListsString</a>.</p>
	</dd>
</dl>
<p>The following methods exist in addition to the normal OpenGL specification:</p>
<dl>
	<dt>glCallListsString</dt>
	<dd>
<pre>        glCallListsString($string);

</pre>
		<p>Works like <a href="http://search.cpan.org/perldoc?glCallLists()">glCallLists()</a>, except that it needs only one parameter, a scalar
holding a string. The string is interpreted as a set of bytes, and each of
these will be passed to glCallLists as GL_BYTE. This is faster than
glCallLists, so you might want to pack your data like this:</p>
<pre>        my $lists = pack(&quot;C&quot;, @array_of_numbers);

</pre>
		<p>And later use it like this:</p>
<pre>        glCallListsString($lists);

</pre>
	</dd>
</dl>

</div>
<h1 id="AUTHOR">AUTHOR</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="AUTHOR_CONTENT">
<p>David J. Goehrig</p>

</div>
<h1 id="SEE_ALSO">SEE ALSO</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SEE_ALSO_CONTENT">
<p><a href="http://search.cpan.org/perldoc?perl">perl</a> <a href="/SDL-App.html">SDL::App</a></p>

</div>
</div>