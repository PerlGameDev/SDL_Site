<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#CATEGORY">CATEGORY</a></li>
<li><a href="#SYNOPSIS">SYNOPSIS</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#CONSTRUCTOR">CONSTRUCTOR </a>
<ul><li><a href="#new">new</a></li>
<li><a href="#display">display</a></li>
<li><a href="#duplicate">duplicate</a></li>
</ul>
</li>
<li><a href="#ATTRIBUTES">ATTRIBUTES</a>
<ul><li><a href="#surface">surface</a></li>
<li><a href="#w_h_format_pitch_flags">w, h, format, pitch, flags</a></li>
<li><a href="#clip_rect">clip_rect</a></li>
</ul>
</li>
<li><a href="#EXTENSIONS">EXTENSIONS</a>
<ul><li><a href="#load">load</a></li>
<li><a href="#blit">blit </a></li>
<li><a href="#blit_by">blit_by</a></li>
<li><a href="#flip">flip</a></li>
<li><a href="#update">update</a></li>
<li><a href="#draw_rect">draw_rect</a></li>
<li><a href="#draw_line">draw_line</a></li>
<li><a href="#draw_gfx_text">draw_gfx_text</a></li>
</ul>
</li>
<li><a href="#AUTHORS">AUTHORS</a>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDLx::Surface - Graphic surface matrix extension</p>

</div>
<h1 id="CATEGORY">CATEGORY</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CATEGORY_CONTENT">
<p>Extension</p>

</div>
<h1 id="SYNOPSIS">SYNOPSIS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SYNOPSIS_CONTENT">
<pre> use SDL;
 use SDL::Video;
 use SDLx::Surface;

 # Create the main surface (display)
 SDL::init(SDL_INIT_VIDEO);
 my $display = SDL::Video::set_video_mode(640, 480, 16, SDL_SWSURFACE);

 my $surf_matrix = SDLx::Surface-&gt;new( surface =&gt; $display);

 $surf_matrix-&gt;[10][10] = 0xFFFF; #for 16bpp write white at x = 10 and y=10

 $surf_matrix-&gt;surface( $new_surface );

 my $orig_surface = $surf_matrix-&gt;surface();

</pre>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">
<p>An <code>SDLx::Surface</code> allows matrix read and write to a surface, safely. </p>

</div>
<h1 id="CONSTRUCTOR">CONSTRUCTOR </h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CONSTRUCTOR_CONTENT">

</div>
<h2 id="new">new</h2>
<div id="new_CONTENT">
<p>Takes a SDL::Surface in hash format.</p>
<p>If a surface is passed to 'surface =&gt;' that is loaded. Otherwise you can define at least a width and a height. </p>
<pre>	SDLx::Surface-&gt;new(  surface =&gt; $surface) # The $surface is loaded

	SDLx::Surface-&gt;new( width=&gt; 400, height=&gt;200) 
		# A SDL::Surface-&gt;new( SDL_ANYFORMAT, 400, 200, 32) is loaded

	SDLx::Surface-&gt;new( width=&gt; 400, height=&gt;200, flags=&gt; SDL_SWSURFACE, depth=&gt;24 ) 
	  	# A SDL::Surface-&gt;new( SDL_SWSURFACE, 400, 200, 24) is loaded 

	SDLx::Surface-&gt;new( width=&gt; 400, height=&gt;200, flags=&gt; SDL_SWSURFACE, depth=&gt;32, greenmask=&gt;0xFF000000 )
		# A SDL::Surface-&gt;new( SDL_ANYFORMAT, 400, 200, 32, 0, 0xFF000000,0, 0, 0 ) is loaded
	SDLx::Surface-&gt;new( w =&gt; 1, h =&gt; 1, color =&gt; 0xFF0000FF )
		# A SDL::Surface-&gt;new( SDL_ANYFORMAT, 1, 1, 32, 0, 0, 0, 0 ) is loaded
		all pixels are colored with color (red)

</pre>

</div>
<h2 id="display">display</h2>
<div id="display_CONTENT">
<p>If <a href="http://search.cpan.org/perldoc?SDLx::App::new">SDLx::App::new</a> or <a href="/SDL-Video.html#get_video_mode">SDL::Video::get_video_mode</a> called before then:</p>
<pre> my $appx = SDLx::Surface::display(); 

</pre>
<p>gets the display if it is already made. Passed options are ignored. Otherwise you can quickly make the display with :</p>
<pre> SDLx::Surface::display( width =&gt; 20, height =&gt; 20) #depth =&gt; 32 and SDL_ANYFORMAT used

</pre>
<p>or you can also pass flags and depth. </p>
<pre> SDLx::Surface::display( width =&gt; 20, height =&gt; 20, flags=&gt; SDL_HWSURFACE, depth=&gt;24) 

</pre>
<p>You can also use the keys <code>w</code> and <code>h</code> in place of <code>width</code> and <code>height</code>, as with <code>new</code>.</p>
<p>Get or create the main display surface and attach to a SDLx::Surface.</p>

</div>
<h2 id="duplicate">duplicate</h2>
<div id="duplicate_CONTENT">
<p>Does a attributes only, no pixel, copy of another SDLx::Surface. </p>

</div>
<h1 id="ATTRIBUTES">ATTRIBUTES</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="ATTRIBUTES_CONTENT">

</div>
<h2 id="surface">surface</h2>
<div id="surface_CONTENT">
<p>If a SDL::Surface is passed it is attached to the matrix. Returns the SDL::Surface that is currently attached to this SDLx::Surface</p>

</div>
<h2 id="w_h_format_pitch_flags">w, h, format, pitch, flags</h2>
<div id="w_h_format_pitch_flags_CONTENT">
<p>Returns the inner SDL::Surface's respective attribute. See <code>SDL::Surface</code>.</p>

</div>
<h2 id="clip_rect">clip_rect</h2>
<div id="clip_rect_CONTENT">
<p>Sets the passed <code>SDL::Rect</code> as the new clip_rect for the surface. Returns the SDL::Surface's clip_rect. See <code>SDL::Video::get_clip_rect</code> and <code>SDL::Video::set_clip_rect</code>.</p>

</div>
<h1 id="EXTENSIONS">EXTENSIONS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="EXTENSIONS_CONTENT">

</div>
<h2 id="load">load</h2>
<div id="load_CONTENT">
<pre> my $surface = SDLx::Surface-&gt;load( 'hero.png' );
 my $surface = SDLx::Surface-&gt;load( 'hero.dat', 'bmp' );

</pre>
<p>Loads the given image file into a <i>new</i> SDLx::Surface surface. A new
surface is <strong>always</strong> created, even if you call it from an already crafted
object. Croaks on errors such as no support built for that image extension
or a file reading error (the error message is SDL::get_error and should
give more details).</p>
<p>Note that load() will automatically figure out the extension based on the
filename you provide. If you wish to force an extension for whatever reason
(like having a filename with a different extension or none at all), you can
optionally pass the file type as a second parameter. Case is not relevant.</p>
<p>If you don't have SDL_image in your build, only bitmap images will be
supported.</p>
<p>Returns the new Surface.</p>





</div>
<h2 id="blit">blit </h2>
<div id="blit_CONTENT">
<pre> $sdlx_surface-&gt;blit( $dest, $src_rect, $dest_rect );

</pre>
<p>Blits SDLx::Surface onto $dest surface. 
$src_rect or $dest_rect are optional. If $src_rect is ommited, it will be the size of the entire surface. If $dest_rect is ommited, it will be blitted at <code>(0, 0)</code>. $src_rect or $dest_rect can be array refs or SDL::Rect. $dest can be SDLx::Surface or SDL::Surface.</p>
<p>Returns $self</p>

</div>
<h2 id="blit_by">blit_by</h2>
<div id="blit_by_CONTENT">
<pre> $sdlx_surface-&gt;blit_by( $src, $src_rect, $dest_rect );

</pre>
<p>Does the same as <code>blit</code> but the <code>SDLx::Surface</code> is the one being blitted to.
This is useful when the surface you have isn't an <code>SDLx::Surface</code>, but the surface it is being blitted to is.</p>

</div>
<h2 id="flip">flip</h2>
<div id="flip_CONTENT">
<p>Applies <a href="/SDL-Video.html#flip">SDL::Video::flip</a> to the Surface, with error checking.</p>
<p>Returns $self</p>

</div>
<h2 id="update">update</h2>
<div id="update_CONTENT">
<pre> $sdlx_surface-&gt;update(); # whole surface is updated
 $sdlx_surface-&gt;update([0,0,1,1]); # only that area (0,0,1,1) is updated

 $sdlx_surface-&gt;update( [ SDL::Rect-&gt;new(0,0,1,2) ... ]); # defined rects are updated

</pre>
<p>Applies <a href="/SDL-Video.html#update_rect">SDL::Video::update_rect</a> for no rect or 1 array ref. Applies <a href="/SDL-Video.html#update_rects">SDL::Video::update_rects</a> for array of <a href="SDL-Rect.html">SDL::Rect</a>s. </p>
<p>Returns $self</p>





</div>
<h2 id="draw_rect">draw_rect</h2>
<div id="draw_rect_CONTENT">
<pre> $sdlx_surface-&gt;draw_rect( [$x,$y,$w,$h], 0xFFFF00FF );
 $sdlx_surface-&gt;draw_rect( SDL::Rect-&gt;new($x,$y,$w,$h), 0xFFFF00FF );

</pre>
<p>Draws a rect on the surface with the given color. If the rect is ommited, the colored rect will be drawn to the entire surface.</p>
<p>Returns $self</p>

</div>
<h2 id="draw_line">draw_line</h2>
<div id="draw_line_CONTENT">
<pre> $sdlx_surface-&gt;draw_line( [$x1, $y1], [$x2, $y2], $color, $antialias); # $color is a number
 $sdlx_surface-&gt;draw_line( [$x1, $y1], [$x2, $y2], \@color, $antialias); # 

</pre>
<p>Draws a line on the surface. Antialias is turned on if $antialias is true. </p>
<p>Returns $self</p>

</div>
<h2 id="draw_gfx_text">draw_gfx_text</h2>
<div id="draw_gfx_text_CONTENT">
<p>Draw text using gfx (not pretty but fast) at give vector, color.</p>
<pre> $surf-&gt;draw_gfx_text( [0,0], 0xffffffff, &quot;fooo&quot;);
 $surf-&gt;draw_gfx_text( [10,10], [20,20,20,20], &quot;fooo&quot;);

</pre>
<p>You can also set the gfx font but passing a hash reference as shown below.</p>
<pre> my $f = '';
 open( my $FH, '&lt;', 'test/data/5x7.fnt');
 binmode ($FH);
 read($FH, $f, 4096);
 close ($FH);

 my $font =  {data=&gt;$f, cw =&gt; 5, ch =&gt; 7};
 $surf-&gt;draw_gfx_text( [0,0], 0xffffffff, &quot;fooo&quot;, $font );

</pre>
<p>Returns $self</p>

</div>
<h1 id="AUTHORS">AUTHORS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="AUTHORS_CONTENT">
<p>See <b>AUTHORS</b> in <cite>SDL</cite>.</p>

</div>
</div>