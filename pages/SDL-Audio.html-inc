<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#CATEGORY">CATEGORY</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#METHODS">METHODS</a>
<ul><li><a href="#open_audio">open_audio</a></li>
<li><a href="#PauseAudio">PauseAudio </a></li>
<li><a href="#GetAudioStatus">GetAudioStatus </a></li>
<li><a href="#LoadWAV">LoadWAV </a></li>
<li><a href="#FreeWAV">FreeWAV </a></li>
<li><a href="#convert_audio">convert_audio</a></li>
<li><a href="#MixAudio">MixAudio </a></li>
<li><a href="#LockAudio">LockAudio</a></li>
<li><a href="#UnlockAudio">UnlockAudio</a></li>
<li><a href="#CloseAudio">CloseAudio </a>
</li>
</ul>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDL::Audio -- SDL Bindings for Audio</p>

</div>
<h1 id="CATEGORY">CATEGORY</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CATEGORY_CONTENT">
<p>TODO, Core, Audio</p>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">





</div>
<h1 id="METHODS">METHODS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="METHODS_CONTENT">

</div>
<h2 id="open_audio">open_audio</h2>
<div id="open_audio_CONTENT">
<p>Opens the audio device with the desired parameters.</p>

</div>
<h2 id="PauseAudio">PauseAudio </h2>
<div id="PauseAudio_CONTENT">
<p>Pauses and unpauses the audio callback processing</p>

</div>
<h2 id="GetAudioStatus">GetAudioStatus </h2>
<div id="GetAudioStatus_CONTENT">
<p>Gets the current audio state</p>

</div>
<h2 id="LoadWAV">LoadWAV </h2>
<div id="LoadWAV_CONTENT">
<p>Loads a WAVE file</p>

</div>
<h2 id="FreeWAV">FreeWAV </h2>
<div id="FreeWAV_CONTENT">
<p>Frees previously opened WAV data</p>

</div>
<h2 id="convert_audio">convert_audio</h2>
<div id="convert_audio_CONTENT">
<pre> SDL::Audio-&gt;convert_audio( cvt, data, len )

</pre>
<p>Converts audio data to a desired audio format.</p>
<p><code>convert_audio</code> takes as first parameter <code>cvt</code>, which was previously initialized. Initializing a <code>SDL::AudioCVT</code> is a two step process. 
First of all, the structure must be created via <code>SDL::AudioCVT-</code>build&gt; along with source and destination format parameters. Secondly, 
the <code>data</code> and <code>len</code> fields must be setup. <code>data</code> should point to the audio data buffer beeing source and destination at 
once and <code>len</code> should be set to the buffer length in bytes. Remember, the length of the buffer pointed to by buf should be 
<code>len*len_mult</code> bytes in length.</p>
<p>Once the <code>SDL::AudioCVT</code> structure is initialized, we can pass it to <code>convert_audio</code>, which will convert the audio data pointed to 
by <code>data</code>. If <code>convert_audio</code> fails <code>undef</code> is returned, otherwise the converted <code>SDL::AudioCVT</code> structure.</p>
<p>If the conversion completed successfully then the converted audio data can be read from <code>cvt-</code>buf&gt;. The amount of valid, converted, 
audio data in the buffer is equal to <code>cvt-</code>len*cvt-&gt;len_ratio&gt;. </p>
<p>Example:</p>
<pre> use SDL;
 use SDL::Audio;
 use SDL::AudioSpec;
 use SDL::AudioCVT;

 # Converting some WAV data to hardware format

 my $desired  = SDL::AudioSpec-&gt;new();
 my $obtained = SDL::AudioSpec-&gt;new();

 # Set desired format
 $desired-&gt;freq(22050);
 $desired-&gt;channels(1);
 $desired-&gt;format(AUDIO_S16);
 $desired-&gt;samples(8192);

 # Open the audio device
 if( SDL::Audio::open_audio($desired, $obtained) &lt; 0 )
 {
     printf( STDERR &quot;Couldn't open audio: %s\n&quot;, SDL::get_error() );
     exit(-1);
 }

 # Load the test.wav
 my $wav_ref = SDL::Audio::load_wav('C:/SDL_perl/test/data/sample.wav', $obtained);

 unless( $wav_ref )
 {
     printf( STDERR &quot;Could not open sample.wav: %s\n&quot;, SDL::get_error() );
     SDL::Audio::close_audio();
     exit(-1);
 }

 my ( $wav_spec, $wav_buf, $wav_len ) = @{$wav_ref};

 # Build AudioCVT
 my $wav_cvt = SDL::AudioCVT-&gt;build( $wav_spec-&gt;format, $wav_spec-&gt;channels, $wav_spec-&gt;freq,
                                     $obtained-&gt;format, $obtained-&gt;channels, $obtained-&gt;freq); 

 # Check that the convert was built
 unless( $wav_cvt )
 {
     printf( STDERR &quot;Couldn't build converter!\n&quot; );
     SDL::Audio::close_audio();
     SDL::Audio::free_wav($wav_buf);
 }

 # And now we're ready to convert
 SDL::Audio::convert_audio($wav_cvt, $wav_buf, $wav_len);

 # We can delete to original WAV data now
 SDL::Audio::free_wav($wav_buf);

</pre>
<p><strong>TODO</strong>: What to do with it? How to use callback? See http://www.libsdl.org/cgi/docwiki.cgi/SDL_ConvertAudio</p>

</div>
<h2 id="MixAudio">MixAudio </h2>
<div id="MixAudio_CONTENT">
<p>Mixes audio data</p>

</div>
<h2 id="LockAudio">LockAudio</h2>
<div id="LockAudio_CONTENT">
<p>Locks out the callback function</p>

</div>
<h2 id="UnlockAudio">UnlockAudio</h2>
<div id="UnlockAudio_CONTENT">
<p>Unlocks the callback function</p>

</div>
<h2 id="CloseAudio">CloseAudio </h2>
<div id="CloseAudio_CONTENT">
<p>Shuts down audio processing and closes the audio device.  </p>

</div>
</div>