<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a>
<ul><li><a href="#CATEGORY">CATEGORY</a></li>
</ul>
</li>
<li><a href="#Creating_a_SDL_Surface_piddle">Creating a SDL Surface piddle</a>
<ul><li><a href="#Creating_a_simple_piddle">Creating a simple piddle</a></li>
<li><a href="#Operating_on_the_Surface_safely">Operating on the Surface safely</a></li>
<li><a href="#Error_due_to_BPP_at_blitting">Error due to BPP at blitting</a></li>
</ul>
</li>
<li><a href="#AUTHORS">AUTHORS</a>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDL::CookBook::PDL -- CookBook for SDL + PDL</p>
<p>PDL provides great number crunching capabilities to Perl and SDL provides game-developer quality real-time bitmapping and sound.  You can use PDL and SDL ''together'' to create real-time, responsive animations and simulations.  In this section we will go through the pleasures and pitfalls of working with both powerhouse libraries.</p>





</div>
<h2 id="CATEGORY">CATEGORY</h2>
<div id="CATEGORY_CONTENT">
<p>Cookbook</p>

</div>
<h1 id="Creating_a_SDL_Surface_piddle">Creating a SDL Surface piddle</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="Creating_a_SDL_Surface_piddle_CONTEN">
<p>PDL's core type is a piddle. Once a piddle is provided to PDL it can go do a numerous amounts of things. Please see the example in 'examples/cookbook/pdl.pl' that came with this module.</p>

</div>
<h2 id="Creating_a_simple_piddle">Creating a simple piddle</h2>
<div id="Creating_a_simple_piddle_CONTENT">
<p>First lets get the right modules.</p>
<pre>  use PDL;
  use SDL::Rect;
  use SDL::Video;
  use SDL::Surface;
  use SDL::PixelFormat;

</pre>
<p>Suppose you want a surface of size (200,400) and 32 bit (RGBA).</p>
<pre>   my ( $bytes_per_pixel, $width, $height ) = ( 4, 200, 400 );

</pre>
<p>Define the $width, $height and $bytes_per_pixel. Your $bytes_per_pixel is the number of bits (in this case 32) divided by 8 bits per byte. Therefore for our 32 bpp we have 4 Bpp;</p>
<pre>   my $piddle  = zeros( byte, $bytes_per_pixel, $width, $height );

</pre>
<p>Create a normal $piddle with zeros, byte format and the Bpp x width x height dimensions.</p>
<pre>   my $pointer = $piddle-&gt;get_dataref();

</pre>
<p>Here is where we get the acutal data the piddle is pointing to. We will have SDL create a new surface from this function.</p>
<pre>   my $surface = SDL::Surface-&gt;new_from( $pointer, $width, $height, 32,
        $width * $bytes_per_pixel );

</pre>
<p>Using the same dimensions we create the surface using new_form. The width *  Bpp is the scanline (pitch) of the surface in bytes.</p>
<pre>   warn &quot;Made surface of $width, $height and &quot;. $surface-&gt;format-&gt;BytesPerPixel;
   return ( $piddle, $surface );

</pre>
<p>Finally make sure that the surface acutally has the correct dimensions we gave.</p>
<p><strong>NOTE:</strong> $surface-&gt;format-&gt;BytesPerPixel must return 1,2,3,4. !!</p>
<p>Now you can blit and use the surface as needed; and do PDL operations as required.</p>





</div>
<h2 id="Operating_on_the_Surface_safely">Operating on the Surface safely</h2>
<div id="Operating_on_the_Surface_safely_CONT">
<p>To make sure SDL is in sync with the data. You must call SDL::Video::lock <strong>before</strong> doing PDL operations on the piddle.</p>
<pre>    SDL::Video::lock_surface($surface);

    $piddle-&gt;mslice( 'X', [ rand(400), rand(400), 1 ], [ rand(200), rand(200), 1 ] )
        .= pdl( rand(225), rand(225), rand(255), 255 );

</pre>
<p>After that you can unlock the surface to blit.</p>
<pre>    SDL::Video::unlock_surface($surface);

</pre>

</div>
<h2 id="Error_due_to_BPP_at_blitting">Error due to BPP at blitting</h2>
<div id="Error_due_to_BPP_at_blitting_CONTENT">
<p>When blitting the new surface check for the return value to see if there has been a problem.</p>
<pre>    my $b = SDL::Video::blit_surface(
        $surface,  SDL::Rect-&gt;new( 0, 0, $surface-&gt;w, $surface-&gt;h ),
        $app, SDL::Rect-&gt;new(  ( $app-&gt;w - $surface-&gt;w ) / 2, ( $app-&gt;h - $surface-&gt;h ) / 2, $app-&gt;w, $app-&gt;h )
       );

    die &quot;Could not blit: &quot; . SDL::get_error() if ( $b == -1 );

</pre>
<p>If the error message is 'Blit combination not supported' that means that the BPP is incorrect or incosistent with the dimensions.
After that a simple update_rect will so your new surface on the screen.</p>

</div>
<h1 id="AUTHORS">AUTHORS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="AUTHORS_CONTENT">
<p>See <a href="/SDL.html#AUTHORS">/SDL.html#AUTHORS</a>.</p>





</div>
</div>