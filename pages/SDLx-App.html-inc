<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#CATEGORY">CATEGORY</a></li>
<li><a href="#SYNOPSIS">SYNOPSIS</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#METHODS">METHODS</a>
<ul><li><a href="#new">new</a></li>
<li><a href="#title">title()</a></li>
<li><a href="#title_new_title">title( $new_title )</a></li>
<li><a href="#title_window_title_icon_title">title( $window_title, $icon_title )</a></li>
<li><a href="#delay_ms">delay( $ms )</a></li>
<li><a href="#ticks">ticks</a></li>
<li><a href="#error">error</a></li>
<li><a href="#resize_width_height">resize( $width, $height )</a></li>
<li><a href="#fullscreen">fullscreen</a></li>
<li><a href="#iconify">iconify</a></li>
<li><a href="#grab_input_CONSTANT">grab_input( $CONSTANT )</a></li>
<li><a href="#loop_actions">loop( \%actions )</a></li>
<li><a href="#sync">sync</a></li>
<li><a href="#attribute_attr">attribute( $attr )</a></li>
<li><a href="#attribute_attr_value">attribute( $attr, $value )</a></li>
</ul>
</li>
<li><a href="#AUTHOR">AUTHOR</a></li>
<li><a href="#SEE_ALSO">SEE ALSO</a>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDLx::App - a SDL perl extension</p>

</div>
<h1 id="CATEGORY">CATEGORY</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CATEGORY_CONTENT">
<p>Extension</p>

</div>
<h1 id="SYNOPSIS">SYNOPSIS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SYNOPSIS_CONTENT">
<pre>    use SDL;
    use SDLx::App; 
    use SDL::Event;
    use SDL::Events; 

    my $app = SDLx::App-&gt;new( 
        title  =&gt; 'Application Title',
        width  =&gt; 640,
        height =&gt; 480,
        depth  =&gt; 32
    ); 

</pre>
<p>This is the manual way of doing things</p>
<pre>    my $event = SDL::Event-&gt;new; # create a new event 

    SDL::Events::pump_events();

    while ( SDL::Events::poll_event($event) ) { 
        my $type = $event-&gt;type(); # get event type 
        print $type; 
        exit if $type == SDL_QUIT; 
    }

</pre>
<p>An alternative to the manual Event processing is the <a href="http://search.cpan.org/perldoc?SDLx::App::loop">SDLx::App::loop</a>.</p>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">
<p><a href="http://search.cpan.org/perldoc?SDLx::App">SDLx::App</a> controls the root window of the of your SDL based application.
It extends the <a href="SDL-Surface.html">SDL::Surface</a> class, and provides an interface to the window
manager oriented functions.</p>

</div>
<h1 id="METHODS">METHODS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="METHODS_CONTENT">

</div>
<h2 id="new">new</h2>
<div id="new_CONTENT">
<p><code>SDLx::App::new</code> initializes the SDL, creates a new screen,
and initializes some of the window manager properties.
<code>SDLx::App::new</code> takes a series of named parameters:</p>
<dl>
	<dt>* title</dt>
	<dt>* icon_title</dt>
	<dt>* icon</dt>
	<dt>* width</dt>
	<dt>* height</dt>
	<dt>* depth</dt>
	<dt>* flags</dt>
	<dt>* resizeable</dt>
</dl>





</div>
<h2 id="title">title()</h2>
<div id="title_CONTENT">

</div>
<h2 id="title_new_title">title( $new_title )</h2>
<div id="title_new_title_CONTENT">

</div>
<h2 id="title_window_title_icon_title">title( $window_title, $icon_title )</h2>
<div id="title_window_title_icon_title_CONTEN">
<p><code>SDLx::App::title</code> takes 0, 1, or 2 arguments. If no parameter is given,
it returns the current application window title. If one parameter is
passed, both the window title and icon title will be set to its value.
If two parameters are passed the window title will be set to the first,
and the icon title to the second.</p>

</div>
<h2 id="delay_ms">delay( $ms )</h2>
<div id="delay_ms_CONTENT">
<p><code>SDLx::App::delay</code> takes 1 argument, and will sleep the application for
that many ms.</p>

</div>
<h2 id="ticks">ticks</h2>
<div id="ticks_CONTENT">
<p><code>SDLx::App::ticks</code> returns the number of ms since the application began.</p>

</div>
<h2 id="error">error</h2>
<div id="error_CONTENT">
<p><code>SDLx::App::error</code> returns the last error message set by the SDL.</p>

</div>
<h2 id="resize_width_height">resize( $width, $height )</h2>
<div id="resize_width_height_CONTENT">
<p><code>SDLx::App::resize</code> takes a new width and height of the application. Only
works if the application was originally created with the resizable option.</p>

</div>
<h2 id="fullscreen">fullscreen</h2>
<div id="fullscreen_CONTENT">
<p><code>SDLx::App::fullscreen</code> toggles the application in and out of fullscreen mode.</p>

</div>
<h2 id="iconify">iconify</h2>
<div id="iconify_CONTENT">
<p><code>SDLx::App::iconify</code> iconifies the application window.</p>

</div>
<h2 id="grab_input_CONSTANT">grab_input( $CONSTANT )</h2>
<div id="grab_input_CONSTANT_CONTENT">
<p><code>SDLx::App::grab_input</code> can be used to change the input focus behavior of
the application. It takes one argument, which should be one of the following:</p>
<dl>
	<dt>* SDL_GRAB_QUERY</dt>
	<dt>* SDL_GRAB_ON</dt>
	<dt>* SDL_GRAB_OFF</dt>
</dl>

</div>
<h2 id="loop_actions">loop( \%actions )</h2>
<div id="loop_actions_CONTENT">
<p><code>SDLx::App::loop</code> is a simple event loop method which takes a reference to a hash
of event handler subroutines. The keys of the hash must be SDL event types such
as SDL_QUIT(), SDL_KEYDOWN(), and the like. When called, the event method recieves
as its parameter the event object used in the loop.</p>
<p>Example:</p>
<pre>    my $app = SDLx::App-&gt;new(
        title  =&gt; &quot;test.app&quot;, 
        width  =&gt; 800, 
        height =&gt; 600, 
        depth  =&gt; 32
    );

    my %actions = (
        SDL_QUIT()    =&gt; sub { exit(0); },
        SDL_KEYDOWN() =&gt; sub { print &quot;Key Pressed&quot; },
    );

    $app-&gt;loop( \%actions );

</pre>

</div>
<h2 id="sync">sync</h2>
<div id="sync_CONTENT">
<p><code>SDLx::App::sync</code> encapsulates the various methods of syncronizing the screen with the
current video buffer. <code>SDLx::App::sync</code> will do a fullscreen update, using the double buffer
or OpenGL buffer if applicable. This is prefered to calling flip on the application window.</p>

</div>
<h2 id="attribute_attr">attribute( $attr )</h2>
<div id="attribute_attr_CONTENT">

</div>
<h2 id="attribute_attr_value">attribute( $attr, $value )</h2>
<div id="attribute_attr_value_CONTENT">
<p><code>SDLx::App::attribute</code> allows one to get and set GL attributes. By passing a value
in addition to the attribute selector, the value will be set. <code>SDL:::App::attribute</code>
always returns the current value of the given attribute, or croaks on failure.</p>

</div>
<h1 id="AUTHOR">AUTHOR</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="AUTHOR_CONTENT">
<p>David J. Goehrig
Kartik Thakore</p>

</div>
<h1 id="SEE_ALSO">SEE ALSO</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SEE_ALSO_CONTENT">
<p><a href="http://search.cpan.org/perldoc?perl">perl</a> <a href="SDL-Surface.html">SDL::Surface</a> <a href="SDL-Event.html">SDL::Event</a>  <a href="SDL-OpenGL.html">SDL::OpenGL</a></p>

</div>
</div>