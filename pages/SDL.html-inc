<div class="pod">
<!-- INDEX START -->
<h3 id="TOP">Index</h3>

<ul><li><a href="#NAME">NAME</a></li>
<li><a href="#CATEGORY">CATEGORY</a></li>
<li><a href="#SYNOPSIS">SYNOPSIS</a></li>
<li><a href="#DESCRIPTION">DESCRIPTION</a></li>
<li><a href="#CONSTANTS">CONSTANTS</a></li>
<li><a href="#METHODS">METHODS</a>
<ul><li><a href="#init">init</a></li>
<li><a href="#init_subsystem">init_subsystem</a></li>
<li><a href="#quit_subsystem">quit_subsystem</a></li>
<li><a href="#quit">quit</a></li>
<li><a href="#was_init">was_init</a></li>
<li><a href="#get_error">get_error</a></li>
<li><a href="#set_error_real">set_error_real</a></li>
<li><a href="#clear_error">clear_error</a></li>
<li><a href="#version">version</a></li>
<li><a href="#linked_version">linked_version</a></li>
<li><a href="#get_ticks">get_ticks</a></li>
<li><a href="#delay">delay</a></li>
</ul>
</li>
<li><a href="#AUTHORS">AUTHORS</a>
<ul><li><a href="#Project_Founder">Project Founder</a></li>
<li><a href="#Current_Maintainers">Current Maintainers</a></li>
<li><a href="#Core_Developers_and_Contributors">Core Developers and Contributors</a></li>
</ul>
</li>
<li><a href="#COPYRIGHT_amp_LICENSE">COPYRIGHT &amp; LICENSE</a></li>
<li><a href="#DISCLAIMER_OF_WARRANTY">DISCLAIMER OF WARRANTY</a>
</li>
</ul><hr />
<!-- INDEX END -->

<h1 id="NAME">NAME</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="NAME_CONTENT">
<p>SDL - Simple DirectMedia Layer for Perl</p>

</div>
<h1 id="CATEGORY">CATEGORY</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CATEGORY_CONTENT">
<p>Core</p>

</div>
<h1 id="SYNOPSIS">SYNOPSIS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="SYNOPSIS_CONTENT">
<pre> use SDL;

</pre>

</div>
<h1 id="DESCRIPTION">DESCRIPTION</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DESCRIPTION_CONTENT">
<p>SDL_perl is a package of Perl modules that provide both functional and object oriented interfaces to the Simple DirectMedia Layer for Perl 5.
This package takes some liberties with the SDL API, and attempts to adhere to the spirit of both the SDL and Perl.
This document describes the low-level functional SDL Perl API.
For the object oriented programming interface please see the documentation provided on a per-class basis.</p>

</div>
<h1 id="CONSTANTS">CONSTANTS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="CONSTANTS_CONTENT">
<p>The constants are not exported by default. You can export them by doing:</p>
<pre> use SDL ':all';

</pre>
<p>or access them directly:</p>
<pre> SDL::SDL_INIT_AUDIO;

</pre>
<p>or by choosing the export tags below:</p>
<p>Export tag: ':init'</p>
<pre> SDL_INIT_AUDIO
 SDL_INIT_VIDEO
 SDL_INIT_CDROM
 SDL_INIT_EVERYTHING
 SDL_INIT_NOPARACHUTE
 SDL_INIT_JOYSTICK
 SDL_INIT_TIMER

</pre>

</div>
<h1 id="METHODS">METHODS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="METHODS_CONTENT">

</div>
<h2 id="init">init</h2>
<div id="init_CONTENT">
<pre> SDL::init( $flags );

</pre>
<p>As with the C language API, SDL Perl initializes the SDL environment with the <code>SDL::init</code> subroutine.
This routine takes a mode flag constructed through the bitwise OR product of the <code>SDL_INIT_*</code> constants.
The <code>$flags</code> tell <code>SDL::init</code> which subsystems to initialize.</p>
<pre> SDL::init(SDL_INIT_AUDIO | SDL_INIT_JOYSTICK);

</pre>
<p><code>SDL::init</code> returns <code>0</code> on success, or <code>-1</code> on error.</p>

</div>
<h2 id="init_subsystem">init_subsystem</h2>
<div id="init_subsystem_CONTENT">
<pre> SDL::init_subsystem( $flags );

</pre>
<p>After SDL has been initialized with <code>SDL::init</code> you may initialize any uninitialized subsystems with <code>SDL::init_subsystem</code>.
The <code>$flags</code> tell <code>SDL::init_subsystem</code> which subsystems to initialize, and are taken in the same way as <code>SDL::init</code>.</p>
<p><code>SDL::init_subsystem</code> returns <code>0</code> on success, or <code>-1</code> on error.</p>

</div>
<h2 id="quit_subsystem">quit_subsystem</h2>
<div id="quit_subsystem_CONTENT">
<pre> SDL::quit_subsystem( $flags );

</pre>
<p><code>SDL::quit_subsystem</code> allows you to shut down a subsystem that has been previously initialized by <code>SDL::init</code> or <code>SDL::init_subsystem</code>.
The <code>$flags</code> tell <code>SDL::quit_subsystem</code> which subsystems to shut down, and are taken in the same way as <code>SDL::init</code>.</p>
<p><code>SDL::quit_subsystem</code> doesn't return any values.</p>

</div>
<h2 id="quit">quit</h2>
<div id="quit_CONTENT">
<pre> SDL::quit;

</pre>
<p><code>SDL::quit</code> Shuts down all SDL subsystems, unloads the dynamically linked library and frees the allocated resources.</p>
<p><strong>Note:</strong> This will be called automatically when Perl exits. You don't need to call this, except if you want to initialize SDL again after this.</p>
<p><code>SDL::quit</code> doesn't return any values.</p>

</div>
<h2 id="was_init">was_init</h2>
<div id="was_init_CONTENT">
<pre> my $flags = SDL::was_init( $flags );

</pre>
<p><code>SDL::was_init</code> allows you to see which SDL subsytems have been initialized.
The <code>$flags</code> tell <code>SDL::was_init</code> which subsystems to check, and are taken in the same way as <code>SDL::init</code>.</p>
<p><code>SDL::was_init</code> returns a mask of the initialized subsystems it checks.
If <code>$flags</code> is <code>0</code> or <code>SDL_INIT_EVERYTHING</code>, a mask of all initialized subsystems will be returned (this does not include <code>SDL_INIT_EVENTTHREAD</code> or <code>SDL_INIT_NOPARACHUTE</code>).</p>
<pre> use SDL ':all';

 my $mask = SDL::was_init(SDL_INIT_AUDIO | SDL_INIT_JOYSTICK);
 if($mask &amp; SDL_INIT_AUDIO and $mask &amp; SDL_INIT_JOYSTICK) {
     # Both subsystems are initialized!
 }

</pre>

</div>
<h2 id="get_error">get_error</h2>
<div id="get_error_CONTENT">
<pre> my $error = SDL::get_error;

</pre>
<p>Returns a scalar value containing the last error message set by the SDL library (if any).</p>

</div>
<h2 id="set_error_real">set_error_real</h2>
<div id="set_error_real_CONTENT">
<pre> SDL::set_error_real( $printf_format, @values )

</pre>
<p><code>SDL::set_error_real</code> sets the SDL error to a <code>printf</code> style formatted string.</p>
<p><code>SDL::set_error_real</code> doesn't return any values.</p>

</div>
<h2 id="clear_error">clear_error</h2>
<div id="clear_error_CONTENT">
<pre> SDL::clear_error;

</pre>
<p><code>SDL::clear_error</code> deletes all information about the last SDL error.
This is useful if the error has been handled by the program.</p>
<p><code>SDL::clear_error</code> doesn't return any values.</p>

</div>
<h2 id="version">version</h2>
<div id="version_CONTENT">
<pre> my $version = SDL::version;

</pre>
<p>Returns an <code>SDL::Version</code> object of the SDL library at compile-time.</p>
<pre> use SDL;
 use SDL::Version;

 my $v = SDL::version;
 printf(&quot;got version: %d.%d.%d\n&quot;, $v-&gt;major, $v-&gt;minor, $v-&gt;patch);

</pre>

</div>
<h2 id="linked_version">linked_version</h2>
<div id="linked_version_CONTENT">
<p><code>SDL::linked_version</code> works in the same way as <code>SDL::version</code>, but returns an <code>SDL::Version</code> object of the SDL library at link-time.</p>

</div>
<h2 id="get_ticks">get_ticks</h2>
<div id="get_ticks_CONTENT">
<pre> my $ticks = SDL::get_ticks;

</pre>
<p>Returns the number of milliseconds since SDL library initialization.
This value wraps around if the program runs for more than 49.7 days</p>

</div>
<h2 id="delay">delay</h2>
<div id="delay_CONTENT">
<pre> SDL::delay( $ms );

</pre>
<p><code>SDL::delay</code> waits the specified number of milliseconds before returning.
The actual delay may be longer than specified depending on the underlying OS.</p>
<p><code>SDL::delay</code> doesn't return anything.</p>
<pre> # Delay for half a second
 SDL::delay(500);

</pre>

</div>
<h1 id="AUTHORS">AUTHORS</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="AUTHORS_CONTENT">

</div>
<h2 id="Project_Founder">Project Founder</h2>
<div id="Project_Founder_CONTENT">
<p>David J. Goehrig</p>

</div>
<h2 id="Current_Maintainers">Current Maintainers</h2>
<div id="Current_Maintainers_CONTENT">
<p>Kartik Thakore (kthakore)</p>
<p>Tobias Leich (FROGGS)</p>

</div>
<h2 id="Core_Developers_and_Contributors">Core Developers and Contributors</h2>
<div id="Core_Developers_and_Contributors_CON">
<p>The following people have dedicated blood sweat and tears to making SDL Perl possible.</p>
<p>See the <a href="http://github.com/kthakore/SDL_perl/graphs/impact">impact graph</a> on our github repository.</p>
<p>Andy Bakun &lt;sdlperl@thwartedefforts.org&gt;</p>
<p>Benedikt Meurer &lt;bmeurer@fwdn.de&gt;</p>
<p>Blaise Roth (Blaizer) &lt;blaiseroth@gmail.com&gt;</p>
<p>Breno G. de Oliveira (garu)</p>
<p>Brian Cassidy (bricas)</p>
<p>chromatic &lt;chromatic@wgz.org&gt;</p>
<p>Daniel Mantovani &lt;daniel.oliveira.mantovani@gmail.com&gt;</p>
<p>Daniel Ruoso http://daniel.ruoso.com/</p>
<p>David J. Goehrig &lt;dgoehrig@cpan.org&gt;</p>
<p>Dustin Mays (dorkfish) &lt;dork.fish.wat.@gmail.com&gt;</p>
<p>Fedora</p>
<p>Gabor Szabo (szabgab) &lt;szabgab@gmail.com&gt;</p>
<p>Guillaue Cottenceau (gc) &lt;gc@mandrakesoft.com&gt;</p>
<p>James King</p>
<p>James Wright &lt;jwright@cpan.org&gt;</p>
<p>Jeffrey T. Palmer (jtpalmer) &lt;jeffrey.t.palmer@gmail.com&gt;</p>
<p>Kartik Thakore (kthakore) &lt;thakore.kartik@gmail.com&gt;</p>
<p>KatrinaTheLamia</p>
<p>kmx &lt;kmx@cpan.org&gt;</p>
<p>Luke</p>
<p>Michael Lamertz &lt;mike@perl-ronin.de&gt;</p>
<p>morgoth.666</p>
<p>Peter BARABAS &lt;z0d@artifact.hu&gt;</p>
<p>Russell Valentine &lt;russ_allegro@yahoo.com&gt;</p>
<p>Ryan Hanlon</p>
<p>Stephane Desneux &lt;sdx@desneux.com&gt;</p>
<p>Tels &lt;http://www.bloodgate.com&gt;</p>
<p>Thomas Tongue</p>
<p>Tobias Leich (FROGGS)</p>
<p>Tony C</p>
<p>Yuval Kogman (nothingmuch)</p>
<p>Wayne Keenan &lt;wayne@metaverse.fsnet.co.uk&gt;</p>
<p>If you would like to contribute to SDL Perl, please post a message on the mailing list:</p>
<p>sdl-devel@perl.org</p>
<p>And request access to the github repository. Or drop us a line on #sdl over at irc.perl.org</p>

</div>
<h1 id="COPYRIGHT_amp_LICENSE">COPYRIGHT &amp; LICENSE</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="COPYRIGHT_amp_LICENSE_CONTENT">
<p>Copyright 2002-2010 SDL Authors as listed above, all rights reserved.</p>
<p>This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.</p>

</div>
<h1 id="DISCLAIMER_OF_WARRANTY">DISCLAIMER OF WARRANTY</h1><p><a href="#TOP" class="toplink">Top</a></p>
<div id="DISCLAIMER_OF_WARRANTY_CONTENT">
<p>BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE &quot;AS IS&quot; WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.</p>
<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENCE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.
</p>

</div>
</div>